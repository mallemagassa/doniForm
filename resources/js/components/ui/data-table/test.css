/* 



<script setup>
import { valueUpdater } from '@/lib/utils'
import { Button } from '@/components/ui/button'
import {
DropdownMenu,
DropdownMenuCheckboxItem,
DropdownMenuContent,
DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'
import { Input } from '@/components/ui/input'
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table'
import {
  FlexRender,
  getCoreRowModel,
  getExpandedRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useVueTable,
} from '@tanstack/vue-table'
import { ArrowUpDown, ChevronDown } from 'lucide-vue-next'
import { h, ref, computed, watch } from 'vue'

const props = defineProps({
  columns: Array,
  data: Array,
  loading: Boolean
})
const loadingLocal = ref(false)

const sorting = ref([])
const columnFilters = ref([])
const columnVisibility = ref({})
const rowSelection = ref({})
const expanded = ref({})
const globalFilter = ref('')
const pagination = ref({
  pageIndex: 0,
  pageSize: 1000,
})

const table = useVueTable({
  data: props.data, // Utilisez directement props.data
  columns: props.columns, // Utilisez directement props.columns
  getCoreRowModel: getCoreRowModel(),
  getPaginationRowModel: getPaginationRowModel(),
  getSortedRowModel: getSortedRowModel(),
  getFilteredRowModel: getFilteredRowModel(),
  globalFilterFn: 'includesString',

  getExpandedRowModel: getExpandedRowModel(),
  onSortingChange: updaterOrValue => valueUpdater(updaterOrValue, sorting),
  onColumnFiltersChange: updaterOrValue => valueUpdater(updaterOrValue, columnFilters),
  onColumnVisibilityChange: updaterOrValue => valueUpdater(updaterOrValue, columnVisibility),
  onRowSelectionChange: updaterOrValue => valueUpdater(updaterOrValue, rowSelection),
  onExpandedChange: updaterOrValue => valueUpdater(updaterOrValue, expanded),
  onGlobalFilterChange: updaterOrValue => valueUpdater(updaterOrValue, globalFilter),
  onPaginationChange: (updaterOrValue) => {
    valueUpdater(updaterOrValue, pagination)
  },


  state: {
    get sorting() { return sorting.value },
    get columnFilters() { return columnFilters.value },
    get columnVisibility() { return columnVisibility.value },
    get rowSelection() { return rowSelection.value },
    get expanded() { return expanded.value },
    get globalFilter() { return globalFilter.value },
    get pagination() {
      return pagination.value
    },
  },
})

// Optionnel: ajoutez un watcher pour recréer le tableau si les données changent
watch(() => props.data, () => {
  table.setOptions(prev => ({
    ...prev,
    data: props.data
  }))
})

</script>

<template>
    <div class="w-full">
        <div class="flex items-center py-4">
        <Input
            class="max-w-sm"
            placeholder="Filter Name..."
            :model-value="globalFilter"
            @update:model-value="val => table.setGlobalFilter(val)"
        />
        <DropdownMenu>
            <DropdownMenuTrigger as-child>
            <Button variant="outline" class="ml-auto">
                Columns <ChevronDown class="ml-2 h-4 w-4" />
            </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
            <DropdownMenuCheckboxItem
                v-for="column in table.getAllColumns().filter((column) => column.getCanHide())"
                :key="column.id"
                class="capitalize"
                :model-value="column.getIsVisible()"
                @update:model-value="(value) => {
                column.toggleVisibility(!!value)
                }"
            >
                {{ column.id }}
            </DropdownMenuCheckboxItem>
            </DropdownMenuContent>
        </DropdownMenu>
        </div>
        <div class="rounded-md border">
        <Table>
            <TableHeader>
            <TableRow v-for="headerGroup in table.getHeaderGroups()" :key="headerGroup.id">
                <TableHead v-for="header in headerGroup.headers" :key="header.id">
                <FlexRender v-if="!header.isPlaceholder" :render="header.column.columnDef.header" :props="header.getContext()" />
                </TableHead>
            </TableRow>
            </TableHeader>
            <TableBody>
                <template v-if="props.loading || loadingLocal">
                    <template v-for="i in 5" :key="i">
                    <TableRow>
                        <TableCell v-for="j in table.getVisibleFlatColumns().length" :key="j">
                        <div class="h-4 bg-gray-200 rounded animate-pulse w-full"></div>
                        </TableCell>
                    </TableRow>
                    </template>
                </template>

                <template v-else-if="table.getRowModel().rows?.length">
                    <template v-for="row in table.getRowModel().rows" :key="row.id">
                    <TableRow :data-state="row.getIsSelected() && 'selected'">
                        <TableCell v-for="cell in row.getVisibleCells()" :key="cell.id">
                        <FlexRender :render="cell.column.columnDef.cell" :props="cell.getContext()" />
                        </TableCell>
                    </TableRow>
                    <TableRow v-if="row.getIsExpanded()">
                        <TableCell :colspan="row.getAllCells().length">
                        {{ JSON.stringify(row.original) }}
                        </TableCell>
                    </TableRow>
                    </template>
                </template>

                <TableRow v-else>
                    <TableCell :colspan="columns.length" class="h-24 text-center">
                    No results.
                    </TableCell>
                </TableRow>
            </TableBody>

        </Table>
        </div>

        <div class="flex items-center justify-between space-x-2 py-4">
            <div class=" text-sm text-muted-foreground">
                {{ table.getFilteredSelectedRowModel().rows.length }} of
                {{ table.getFilteredRowModel().rows.length }} row(s) selected.
            </div>
            <div class="flex items-center justify-center space-x-2 py-4">
                <select
                    class="ml-2 border rounded px-2 py-1 text-sm"
                    :value="table.getState().pagination.pageSize"
                    @change="e => {
                    const value = Number(e.target.value)
                    if (value === -1) {
                        table.setPageSize(props.data.length) // Affiche tous les produits
                    } else {
                        table.setPageSize(value)
                    }
                    }"
                >
                    <option v-for="size in [10, 25, 50, 100]" :key="size" :value="size">{{ size }}</option>
                    <option :value="-1">Tout</option>
                </select>
            </div>
            <div class="space-x-2">
                <Button
                variant="outline"
                size="sm"
                :disabled="!table.getCanPreviousPage()"
                @click="table.previousPage()"
                >
                Previous
                </Button>
                <Button
                variant="outline"
                size="sm"
                :disabled="!table.getCanNextPage()"
                @click="table.nextPage()"
                >
                Next
                </Button>
            </div>
        </div>
    </div>
</template>




*/